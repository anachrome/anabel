module IRC.Commands where

import Prelude hiding (concat)
import Data.Foldable (toList, concat)
import IRC.Types

-- util function.  maybe put in its own file later?
mapLast :: (a -> a) -> [a] -> [a]
    mapLast f = foldr (once f) [] where
        once f s [] = [f s]
        once _ s ls = s:ls

-- let's start with a general command function
command :: Command -> Args -> Message
command cmd args = Message Nothing cmd args

-- Message -> String functions
-- only transmit should be used outside of this file (the rest are helpers)

transmitPrefix :: Prefix -> String
transmitPrefix = concat . fmap ((++ " ") . transmitPrefix')
    transmitPrefix' (Server h)   = h
    transmitPrefix' (User n u h) = n ++ maybe "" ('!' :) u ++ maybe "" ('@' :) h

transmitArgs :: Args -> String
transmitArgs = unwords . mapLast (':' :) where

transmit :: Message -> String
transmit (Message pref cmd args) = transmitPrefix pref
                                ++ cmd ++ " "
                                ++ transmitArgs args ++ "\r\n" where

-- functions of type [params] -> Message
-- these are all taken from section 3 of rfc 2812

-- Password message (3.1.1)
pass :: String -> Message
pass p = command "PASS" [p]

-- Nick message (3.1.2)
nick :: Nickname -> Message
nick n = command "NICK" [n]

-- User message (3.1.3)
user :: ...
user u = TODO

-- Oper message (3.1.4)
oper :: Nickname -> String -> Message
oper n p = command "OPER" [n,p]

-- User mode message (3.1.5)
mode :: ...
mode n m = TODO

-- Service message (3.1.6)
service :: ...
service = TODO

-- Quit message (3.1.7)
quit :: (Maybe String) -> Message
quit (Just msg) = command "QUIT" [msg]
quit Nothing    = command "QUIT" []
-- quit = command "QUIT" . toList

-- Squit message (3.1.8)
squit :: String -> String -> Message
squit s msg = command "SQUIT" [s,msg]

-- Join message (3.2.1)
join :: ...
join = TODO

-- Part message (3.2.2)
part :: ...
part = TODO

-- Channel mode message (3.2.3)
mode :: ...
mode = TODO

-- Topic message (3.2.4)
topic :: Channel -> (Maybe String) -> Message
topic c (Just msg) = command "TOPIC" [c,msg]
topic c Nothing    = command "TOPIC" [c]
-- topic c = command "TOPIC" . (c:) . toList

-- Names message (3.2.5)
names :: ...
name = TODO

-- List message (3.2.6)
list :: ...
list = TODO

-- Invite message (3.2.7)
invite :: Nickname -> Channel -> Message
invite n c = command "INVITE" [n,c]

-- Kick command (3.2.8)
kick :: ...
kick = TODO

-- Private messages (3.3.1)
privmsg :: String -> String -> Message
privmsg t msg = command "PRIVMSG" [t,msg]

-- Notice (3.3.2)
notice :: String -> String -> Message
notice t msg = command "NOTICE" [t,msg]

-- Motd message (3.4.1)
motd :: (Maybe String) -> Message
motd = command "MOTD" . toList

-- Lusers message (3.4.2)
lusers :: ...
lusers = TODO

-- Version message (3.4.3)
version :: (Maybe String) -> Message
version = command "VERSION" . toList

-- Stats message (3.4.4)
stats :: ...
stats = TODO

-- Links message (3.4.5)
links :: ...
links = TODO

-- Time message (3.4.6)
time :: (Maybe String) -> Message
time = command "TIME" . toList

-- Connect message (3.4.7)
connect :: ...
connect = TODO

-- Trace message (3.4.8)
trace :: (Maybe String) -> Message
trace = command "TRACE" . toList

-- Admin command (3.4.9)
admin :: (Maybe String) -> Message
admin = command "ADMIN" . toList

-- Info command (3.4.10)
info :: (Maybe String) -> Message
info = command "INFO" . toList

-- Servlist message (3.5.1)
servlist :: ...
servlist = TODO

-- Squery message (3.5.2)
squery :: String -> String -> Message
squery t msg = command "SQUERY" [t,msg]

-- Who query (3.6.1)
who :: ...
who = TODO

-- Whois query (3.6.2)
whois :: ...
whois = TODO

-- Whowas (3.6.3)
whowas :: ...
whowas = TODO

-- Kill message (3.7.1)
kill :: Nickname -> String -> Message
kill n str = command "KILL" [n,str]

-- Ping message (3.7.2)
ping :: ...
ping = TODO

-- Pong message (3.7.3)
pong :: ...
pong = TODO



---------------------------------
---------------------------------
---------------------------------

user :: Username -> Realname -> Message
-- the USER irc command takes two other args I don't forsee anyone caring about
-- at the moment
user u r = command "USER" [u, "8", "*", r]

simpleCommand :: String -> String -> Message
simpleCommand cmd arg = command cmd [arg]

-- nick = simpleCommand "NICK"
-- join = simpleCommand "JOIN"

optCommand :: String -> Maybe String -> Message
optCommand cmd = command cmd . toList

-- quit = optCommand "QUIT"

nick :: Nickname -> Message
nick n = command "NICK" [n]

join :: Channel -> Message
join c = command "JOIN" [c]

part :: Channel -> Maybe String -> Message
part c = command "PART" . (c :) . toList

quit :: Maybe String -> Message
quit = command "QUIT" . toList

privmsg :: Channel -> String -> Message
privmsg c msg = command "PRIVMSG" [c, msg]

ping :: Maybe String -> Message
ping = command "PING" . toList 

pong :: Maybe String -> Message
pong = command "PONG" . toList

